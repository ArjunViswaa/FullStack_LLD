State - Built in javascript object which represents / holds the current condition of the component.

Diff from props - Props are immutable, state is a variable that's mutable and managed internally
Props is local to component / internal data    State is passed from parent

--> Change in state will trigger react to re-render the component.

Hooks ==> Functions (spl) which allow additional capabilities to your functional component
Use of hooks -> 1.) Manage state     2.) Perform side effects.      3.) Reuse logic
                    UseState             UseEffect                      Custom Hooks

useState - Allows the user to manage states.

{/* Controlled component - It is when the input field control is given to React alone 
helping to avoid confusions from DOM and ReactDOM updating the same UI component */}
<input type="text" id="name" value={name} onChange={
    (event) => {
        setName(event.target.value);
    }
} />


Lifting the state up : There are 2 child comps connected to a parent component. Now the changes made to one child comp's State
should change the other child comp's behaviour what to do now ??? Lift the state up to the common parent component...

Lifecycle of a component : 
3 stages ==> Mounting, Updation, Unmounting

useEffect - Allows you to configure and run pieces of code in any specified stages of the component.
Allows you to perform side effects, the operations that allow your component to talk / sync to any other third level system

useEffect - Alarm clock (analogy) - It reminds a react that it needs to run a piece of code.

